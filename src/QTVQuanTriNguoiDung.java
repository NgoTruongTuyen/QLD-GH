import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zerotus
 */
public class QTVQuanTriNguoiDung extends javax.swing.JFrame {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    
    String userID = "QTV0001";
    String userType = "0";
    String currentUser = "QTV0001";
    /**
     * Creates new form ThongTinDoiTac
     */
    public QTVQuanTriNguoiDung() {
        initComponents();
        updateDB();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDetail = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnFilterCustomer = new javax.swing.JButton();
        btnFilterAll = new javax.swing.JButton();
        btnFilterDriver = new javax.swing.JButton();
        btnFilterPartner = new javax.swing.JButton();
        btnFilterManager = new javax.swing.JButton();
        btnFilterAdmin = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtSearchByAccountID = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUserList = new javax.swing.JTable();
        btnViewProfile = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("HỆ THỐNG ĐẶT VÀ CHUYỂN HÀNG ONLINE");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1520, 90));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Quản lý nhân viên");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 654, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Quản trị người dùng");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 570, 40));

        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel8.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 170, 60));

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel8.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 170, 60));

        btnDetail.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDetail.setText("Chi tiết");
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });
        jPanel8.add(btnDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 170, 60));

        btnRefresh.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnRefresh.setText("Tải lại");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel8.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, 170, 60));

        jPanel1.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 700, 1520, 70));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnFilterCustomer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterCustomer.setText("Khách hàng");
        btnFilterCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterCustomerActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, 310, 40));

        btnFilterAll.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterAll.setText("Tất cả");
        btnFilterAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterAllActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 310, 40));

        btnFilterDriver.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterDriver.setText("Tài xế");
        btnFilterDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterDriverActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterDriver, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 310, 40));

        btnFilterPartner.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterPartner.setText("Đối tác");
        btnFilterPartner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterPartnerActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterPartner, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 310, 40));

        btnFilterManager.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterManager.setText("Nhân viên");
        btnFilterManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterManagerActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterManager, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 310, 40));

        btnFilterAdmin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFilterAdmin.setText("Quản trị viên");
        btnFilterAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterAdminActionPerformed(evt);
            }
        });
        jPanel6.add(btnFilterAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 310, 40));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("Quản lý tài khoản");
        jPanel6.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 40));

        jPanel3.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 470, 410));

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel7.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 150, 40));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Tìm kiếm");
        jPanel7.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 40));

        txtSearchByAccountID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jPanel7.add(txtSearchByAccountID, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 260, 40));

        jPanel3.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 470, 90));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableUserList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableUserList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã tài khoản", "Loại người dùng", "Tình trạng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableUserList);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 980, 510));

        jPanel3.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 1000, 530));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 1520, 560));

        btnViewProfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewProfile.setText("Thông tin tài khoản");
        btnViewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewProfileActionPerformed(evt);
            }
        });
        jPanel1.add(btnViewProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 100, -1, 40));

        btnLogout.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnLogout.setText("Đăng xuất");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        jPanel1.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1400, 100, -1, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1538, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateDB() {
        int nums, type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN");
            
            rs = pstmt.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            
            //nums = stData.getColumnCount();
            nums = 3;
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            while (rs.next()) {
                Vector columnData = new Vector();
                
                for (int i = 0; i < nums; i++) {
                    columnData.add(rs.getString("MATK"));
                    type = Integer.parseInt(rs.getString("LOAIND"));
                    status = Integer.parseInt(rs.getString("TINHTRANG"));
                    switch (type) {
                        case 0: 
                            typeString = "Quản trị viên";
                            break;
                        case 1: 
                            typeString = "Nhân viên";
                            break;
                        case 2: 
                            typeString = "Đối tác";
                            break;
                            
                        case 3: 
                            typeString = "Tài xế";
                            break;
                        default:
                            typeString = "Khách hàng"; 
                    }
                    
                    if (status == 0) {
                        statusString = "Bị khóa";
                    }
                    else {
                        statusString = "Bình thường";
                    }
                    
                    columnData.add(typeString);
                    columnData.add(statusString);
                }
                
                recordTable.addRow(columnData);
            }
            
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }
    
    private String getTableName(String id) {
        String preCode = id.substring(0, 2);
        String result;
        switch (preCode) {
            case "NV":
                result = "NHANVIEN";
                break;
            case "DT":
                result = "DOITAC";
                break;
            case "TX":
                result = "TAIXE";
                break;
            case "KH":
                result = "KHACHHANG";
                break;
            default:
                result = "QUANTRIVIEN";   
        } 
        
        return result;
    }
    
    private int getUserType(String id) {
        String preCode = id.substring(0, 2);
        int result;
        switch (preCode) {
            case "NV":
                result = 1;
                break;
            case "DT":
                result = 2;
                break;
            case "TX":
                result = 3;
                break;
            case "KH":
                result = 4;
                break;
            default:
                result = 0;   
        } 
        
        return result;
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        QTVTaoTaiKhoan adminCreate = new QTVTaoTaiKhoan();
        adminCreate.userID = userID;
        adminCreate.userType = userType;
        adminCreate.currentUser = currentUser;
        this.hide();
        adminCreate.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed
        DefaultTableModel recordTable = (DefaultTableModel)tableUserList.getModel();
        int selectedRows = tableUserList.getSelectedRow();

        try {
            String id = recordTable.getValueAt(selectedRows, 0).toString();
            id = id.replaceAll("\\s+", "");
            int type = this.getUserType(id);

            switch (type) {
                case 0:
                    ThongTinQuanTriVien adminInfo = new ThongTinQuanTriVien();
                    adminInfo.userID = userID;
                    adminInfo.userType = userType;
                    adminInfo.currentUser = id;
                    
                    this.hide();
                    adminInfo.loadData();
                    adminInfo.setVisible(true);
                    break;
                case 1:
                    ThongTinNhanVien managerInfo = new ThongTinNhanVien();
                    managerInfo.userID = userID;
                    managerInfo.userType = userType;
                    managerInfo.currentUser = id;
                    
                    this.hide();
                    managerInfo.loadData();
                    managerInfo.setVisible(true);
                    break;
                case 2:
                    ThongTinDoiTac partnerInfo = new ThongTinDoiTac();
                    partnerInfo.userID = userID;
                    partnerInfo.userType = userType;
                    partnerInfo.currentUser = id;

                    this.hide();
                    partnerInfo.loadData();
                    partnerInfo.setVisible(true);
                    break;
                case 3:
                    ThongTinTaiXe driverInfo = new ThongTinTaiXe();
                    driverInfo.userID = userID;
                    driverInfo.userType = userType;
                    driverInfo.currentUser = id;

                    this.hide();
                    driverInfo.loadData();
                    driverInfo.setVisible(true);
                    break;
                default:
                    ThongTinKhachHang customerInfo = new ThongTinKhachHang();
                    customerInfo.userID = userID;
                    customerInfo.userType = userType;
                    customerInfo.currentUser = id;

                    this.hide();
                    customerInfo.loadData();
                    customerInfo.setVisible(true);
                    break;
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra, không thể xem chi tiết tài khoản!");
        }
    }//GEN-LAST:event_btnDetailActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where MATK = ?");
            pstmt.setString(1, txtSearchByAccountID.getText());
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            boolean found = false;
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                found = true;
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                type = Integer.parseInt(rs.getString("LOAIND"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                switch (type) {
                    case 0: 
                        typeString = "Quản trị viên";
                        break;
                    case 1: 
                        typeString = "Nhân viên";
                        break;
                    case 2: 
                        typeString = "Đối tác";
                        break;

                    case 3: 
                        typeString = "Tài xế";
                        break;
                    default:
                        typeString = "Khách hàng"; 
                }

                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add(typeString);
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
            
            if (found == false) {
                String rsMessage = "Mã tài khoản không tồn tại, vui lòng nhập lại!";
                JOptionPane.showMessageDialog(this, rsMessage);
                this.btnRefreshActionPerformed(evt);
            }
            
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFilterManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterManagerActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where LOAIND = 1");
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add("Nhân viên");
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnFilterManagerActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtSearchByAccountID.setText("");
        
        DefaultTableModel RecordTable = (DefaultTableModel) tableUserList.getModel();
        RecordTable.setRowCount(0);
        
        updateDB();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnViewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewProfileActionPerformed
        ThongTinQuanTriVien adminInfo = new ThongTinQuanTriVien();
        adminInfo.userID = userID;
        adminInfo.userType = userType;
        adminInfo.currentUser = userID;
        this.hide();
        adminInfo.loadData();
        adminInfo.hideDeleteButton();
        adminInfo.setVisible(true);
    }//GEN-LAST:event_btnViewProfileActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        DangNhap login = new DangNhap();
        this.hide();
        login.setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnFilterAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterAllActionPerformed
        txtSearchByAccountID.setText("");
        
        DefaultTableModel RecordTable = (DefaultTableModel) tableUserList.getModel();
        RecordTable.setRowCount(0);
        
        updateDB();
    }//GEN-LAST:event_btnFilterAllActionPerformed

    private void btnFilterAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterAdminActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where LOAIND = 0");
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add("Quản trị viên");
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnFilterAdminActionPerformed

    private void btnFilterPartnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterPartnerActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where LOAIND = 2");
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add("Đối tác");
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnFilterPartnerActionPerformed

    private void btnFilterDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterDriverActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where LOAIND = 3");
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add("Tài xế");
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnFilterDriverActionPerformed

    private void btnFilterCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterCustomerActionPerformed
        int type, status;
        String typeString;
        String statusString;
        try{
            conn = DBInfo.connect();
            pstmt = conn.prepareStatement("select * from TAIKHOAN where LOAIND = 4");
            rs = pstmt.executeQuery();
            
            ResultSetMetaData stData = rs.getMetaData();
            
            DefaultTableModel recordTable = (DefaultTableModel) tableUserList.getModel();
            recordTable.setRowCount(0);
            
            while (rs.next()) {
                Vector columnData = new Vector();
                columnData.add(rs.getString("MATK"));
                status = Integer.parseInt(rs.getString("TINHTRANG"));
                if (status == 0) {
                    statusString = "Bị khóa";
                }
                else {
                    statusString = "Bình thường";
                }

                columnData.add("Khách hàng");
                columnData.add(statusString);
                
                recordTable.addRow(columnData);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnFilterCustomerActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel recordTable = (DefaultTableModel)tableUserList.getModel();
        int selectedRows = tableUserList.getSelectedRow();

        try{
            String id = recordTable.getValueAt(selectedRows, 0).toString();
            id = id.replaceAll("\\s+", "");
            boolean deletePermission = false;

            
            int type = this.getUserType(id);

            if (type == 0 || type == 1) {
                deletePermission = true;
            }
            String rsMessage = "Bạn không có quyền xóa tài khoản này!";
            if (userID.equals(id)) {
                deletePermission = false;
                rsMessage = "Bạn không thể xóa chính tài khoản của mình";
            }

            if (deletePermission) {
                int deleteItem = JOptionPane.showConfirmDialog(null,"Bạn chắc chắn muốn xóa?",
                    "Xóa tài khoản", JOptionPane.YES_NO_OPTION);
                if (deleteItem ==  JOptionPane.YES_OPTION) {
                    conn = DBInfo.connect();
                    //Xóa thông tin người dùng
                    if (type == 0) {
                        pstmt = conn.prepareStatement("delete from QUANTRIVIEN where MAQTV = ?");
                        pstmt.setString(1, id);
                    }
                    else {
                        pstmt = conn.prepareStatement("delete from NHANVIEN where MANV = ?");
                        pstmt.setString(1, id);
                    }
                    pstmt.executeUpdate();

                    //Xóa tài khoản người dùng
                    pstmt = conn.prepareStatement("delete from TAIKHOAN where MATK = ?");
                    pstmt.setString(1, id);
                    pstmt.executeUpdate();

                    this.btnRefreshActionPerformed(evt);
                    JOptionPane.showMessageDialog(this, "Xóa thành công!");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, rsMessage);
            }

        } catch(Exception ex){

            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra, xóa không thành công!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QTVQuanTriNguoiDung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QTVQuanTriNguoiDung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QTVQuanTriNguoiDung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QTVQuanTriNguoiDung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QTVQuanTriNguoiDung().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnFilterAdmin;
    private javax.swing.JButton btnFilterAll;
    private javax.swing.JButton btnFilterCustomer;
    private javax.swing.JButton btnFilterDriver;
    private javax.swing.JButton btnFilterManager;
    private javax.swing.JButton btnFilterPartner;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewProfile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableUserList;
    private javax.swing.JTextField txtSearchByAccountID;
    // End of variables declaration//GEN-END:variables
}
